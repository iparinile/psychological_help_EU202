import asyncio
import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import aiosqlite
from dotenv import load_dotenv
import os
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ ai_service(–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç)
from ..ai_service import initialize_dialogue, get_llm_response, get_book_recommendations

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    choosing_issue = State()
    in_dialogue = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_dialogues = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def save_user(user_id, username):
    async with aiosqlite.connect('users.db') as db:
        await db.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, dialogs TEXT)")
        await db.execute("INSERT OR REPLACE INTO users (id, username, dialogs) VALUES (?, ?, ?)",
                         (user_id, username, ''))
        await db.commit()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_token = os.getenv('BOT_TOKEN')
if bot_token is None:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
@router.message(CommandStart())
async def start(message: types.Message, state: FSMContext) -> None:
    user = message.from_user
    await save_user(user.id, user.username)
    
    kb_list = [
        [KeyboardButton(text='–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º')],
        [KeyboardButton(text='–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ')],
        [KeyboardButton(text='–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö')]
    ]
    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:"
    )
    
    await state.set_state(UserStates.choosing_issue)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.",
                         reply_markup=reply_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã
@router.message(UserStates.choosing_issue)
async def choose_issue(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º issue_id –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    issue_mapping = {
        '–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º': '1',
        '–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ': '2', 
        '–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö': '3'
    }
    
    issue_id = issue_mapping.get(message.text)
    
    if issue_id:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–±–ª–µ–º—É: {message.text} (ID: {issue_id})")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ —Å AI —Å–µ—Ä–≤–∏—Å–æ–º
        try:
            dialogue_id = initialize_dialogue(issue_id, user_id)
            user_dialogues[user_id] = {
                'dialogue_id': dialogue_id,
                'issue_id': issue_id,
                'messages': []
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
            with open('ai_service/system_prompts.json', 'r', encoding='utf-8') as f:
                prompts = json.load(f)
            
            initial_message = prompts[issue_id]["initial_message"]
            
            await state.set_state(UserStates.in_dialogue)
            await message.answer(initial_message, reply_markup=ReplyKeyboardRemove())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å AI
@router.message(UserStates.in_dialogue) 
async def handle_dialogue(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_text = message.text
    
    if user_id not in user_dialogues:
        await message.answer("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        await state.clear()
        return
    
    dialogue_info = user_dialogues[user_id]
    issue_id = dialogue_info['issue_id']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    dialogue_info['messages'].append({
        "role": "user",
        "content": user_text
    })
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∫–∞–∑–∞–ª: {user_text}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        with open('ai_service/system_prompts.json', 'r', encoding='utf-8') as f:
            prompts = json.load(f)
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        recent_messages = dialogue_info['messages'][-10:] if len(dialogue_info['messages']) > 10 else dialogue_info['messages']
        
        full_messages = [
            {"role": "system", "content": prompts[issue_id]["system_prompt"]},
            {"role": "assistant", "content": prompts[issue_id]["initial_message"]}
        ] + recent_messages
        
        ai_response = get_llm_response(full_messages, user_id, issue_id)
        
        # –£—Å–∏–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
        if (not ai_response or 
            ai_response.strip() in ['', '.', '...'] or 
            len(ai_response.strip()) < 10 or
            ai_response.startswith('.') or
            ai_response.count('?') > 5):  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
            
            logger.warning(f"AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: '{ai_response[:100]}'")
            ai_response = "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Å–µ–π—á–∞—Å –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã –∏ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        lines = ai_response.split('\n')
        if (len(lines) > 1 and 
            any(line.strip() == '.' for line in lines) or
            '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º' in ai_response):
            
            logger.warning(f"AI –¥–∞–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π/–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {ai_response[:100]}")
            ai_response = "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤–∞–º —Å–µ–π—á–∞—Å –Ω–µ–ø—Ä–æ—Å—Ç–æ. –î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ –≤–∞—à–∏—Ö –æ—â—É—â–µ–Ω–∏—è—Ö. –ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç?"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ —Ä–æ–ª–∏ (–µ—Å–ª–∏ AI –Ω–∞—á–∏–Ω–∞–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å–µ–±–µ –∫–∞–∫ –æ –º–æ–¥–µ–ª–∏)
        problematic_phrases = [
            "—è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–º–æ–¥–µ–ª—å google", "—è ai", "—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π", 
            "—è –±–æ—Ç", "—è –Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥", "—è –Ω–µ –∏–º–µ—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏", "—è –≤—Å–µ–≥–æ –ª–∏—à—å"
        ]
        
        if any(phrase in ai_response.lower() for phrase in problematic_phrases):
            logger.warning(f"AI –≤—ã—à–µ–ª –∏–∑ —Ä–æ–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞: {ai_response[:100]}")
            ai_response = "–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ –≤–∞—à–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö. –ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
        dialogue_info['messages'].append({
            "role": "assistant", 
            "content": ai_response
        })
        
        await message.answer(ai_response)
        
        # –ï—Å–ª–∏ AI —Å–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–Ω–∏–≥–∏ –≤ –æ—Ç–≤–µ—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        books_trigger_phrases = ["–º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å", "–µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –∫–Ω–∏–≥–∏", "–ø–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–∏–≥–∏", "–∫–Ω–∏–≥–∏ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ"]
        if any(phrase in ai_response.lower() for phrase in books_trigger_phrases):
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìö –î–∞, –ø–æ–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"books_{user_id}")]
            ])
            await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?", reply_markup=inline_kb)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ—Å–ª–µ 3-4 —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ –ø—Ä–æ–±–ª–µ–º–µ)  
        else:
            user_messages_count = len([msg for msg in dialogue_info['messages'] if msg['role'] == 'user'])
            
            if user_messages_count == 3:  # –ü–æ—Å–ª–µ 3-–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥", callback_data=f"books_{user_id}")]
                ])
                await message.answer("üí° –ö—Å—Ç–∞—Ç–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —è –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã –ø–æ –≤–∞—à–µ–π —Ç–µ–º–µ", reply_markup=inline_kb)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –Ø –ø—Å–∏—Ö–æ–ª–æ–≥-–±–æ—Ç –∏ —Ö–æ—á—É –≤–∞–º –ø–æ–º–æ—á—å. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥
@router.callback_query(lambda callback: callback.data.startswith('books_'))
async def handle_books_callback(callback: types.CallbackQuery):
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    user_id = callback.data.split('_')[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    if user_id not in user_dialogues:
        await callback.message.answer("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    dialogue_info = user_dialogues[user_id]
    issue_id = dialogue_info['issue_id']
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        with open('ai_service/system_prompts.json', 'r', encoding='utf-8') as f:
            prompts = json.load(f)
        
        full_messages = [
            {"role": "system", "content": prompts[issue_id]["system_prompt"]},
            {"role": "assistant", "content": prompts[issue_id]["initial_message"]}
        ] + dialogue_info['messages']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = get_book_recommendations(
            dialogue_info['dialogue_id'],
            user_id,
            issue_id,
            full_messages
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
        if recommendations and (recommendations.get("books") or recommendations.get("resources")):
            from ai_service.ai_books import format_recommendations
            formatted_recs = format_recommendations(recommendations)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
            if len(formatted_recs.strip()) > 50:
                await callback.message.answer(f"üìö –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:\n\n{formatted_recs}")
            else:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                retry_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"books_{user_id}")]
                ])
                await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º.", reply_markup=retry_kb)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É  
            retry_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"books_{user_id}")]
            ])
            await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å AI —Å–µ—Ä–≤–∏—Å–æ–º.", reply_markup=retry_kb)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–Ω–æ–ø–∫–µ: {e}")
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")

async def main():
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == '__main__':
    asyncio.run(main())
