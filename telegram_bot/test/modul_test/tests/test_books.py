import unittest
import os
import json
import sys
import tempfile
import shutil
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../../')))

from telegram_bot.ai_service.ai_books import (
    get_book_recommendations,
    create_recommendation_prompt,
    format_recommendations,
    get_book_recommendations_from_file
)

class TestBooks(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è ai_books.py"""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.test_dir = tempfile.mkdtemp()
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        import telegram_bot.ai_service.database as database_module
        self.original_db_path = database_module.DATABASE_PATH
        database_module.DATABASE_PATH = os.path.join(self.test_dir, 'test_dialogues.db')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database_module.init_db()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        self.test_dialogue_path = os.path.join(self.test_dir, 'test_dialogue.json')
        test_dialogue = [
            {"role": "system", "content": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"},
            {"role": "user", "content": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º"},
            {"role": "assistant", "content": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö"},
            {"role": "user", "content": "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã"}
        ]
        with open(self.test_dialogue_path, 'w', encoding='utf-8') as f:
            json.dump(test_dialogue, f)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π config.json
        self.config_path = 'telegram_bot/ai_service/config.json'
        self.original_config_path = self.config_path
        
        if not os.path.exists(self.config_path):
            os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
            test_config = {
                "openrouter_api_key": "test_api_key"
            }
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(test_config, f)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥
        self.test_recommendations = {
            "books": [
                {
                    "title": "–ß—É–≤—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞",
                    "author": "–ù–∞—Ç–∞–Ω–∏—ç–ª—å –ë—Ä–∞–Ω–¥–µ–Ω",
                    "description": "–ö–Ω–∏–≥–∞ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ –∏ –µ—ë –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∂–∏–∑–Ω–∏",
                    "why_relevant": "–ü–æ–º–æ–∂–µ—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –Ω–∏–∑–∫–æ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π –ø—Ä–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏"
                },
                {
                    "title": "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è –¥–ª—è —á–∞–π–Ω–∏–∫–æ–≤",
                    "author": "–†–æ–Ω–∞ –ë—Ä–∞–Ω—á",
                    "description": "–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ –º–µ—Ç–æ–¥—ã –ö–ü–¢",
                    "why_relevant": "–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –±–æ—Ä—å–±—ã —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏"
                }
            ],
            "resources": [
                {
                    "title": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Moodpath",
                    "type": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    "description": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –¥–µ–ø—Ä–µ—Å—Å–∏–∏",
                    "link": "https://mymoodpath.com/"
                },
                {
                    "title": "–°–∞–π—Ç –ü—Å–∏—Ö–æ–ª–æ–≥–∏.—Ä—Ñ",
                    "type": "–û–Ω–ª–∞–π–Ω-—Ä–µ—Å—É—Ä—Å",
                    "description": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤",
                    "link": "https://–ø—Å–∏—Ö–æ–ª–æ–≥–∏.—Ä—Ñ"
                }
            ]
        }
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        import telegram_bot.ai_service.database as database_module
        database_module.DATABASE_PATH = self.original_db_path
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        shutil.rmtree(self.test_dir)
    
    def test_create_recommendation_prompt(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        issue_id = '1'  # –î–µ–ø—Ä–µ—Å—Å–∏—è
        dialogue = [
            {"role": "system", "content": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"},
            {"role": "user", "content": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º"},
            {"role": "assistant", "content": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö"},
            {"role": "user", "content": "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã"}
        ]
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        prompt = create_recommendation_prompt(issue_id, dialogue)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.assertIn("–¥–µ–ø—Ä–µ—Å—Å–∏—è", prompt)
        self.assertIn("–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º", prompt)
        self.assertIn("–ú–Ω–µ —Å–ª–æ–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã", prompt)
        self.assertIn("JSON —Ñ–æ—Ä–º–∞—Ç–µ", prompt)
    
    def test_format_recommendations(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatted_text = format_recommendations(self.test_recommendations)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.assertIn("üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–Ω–∏–≥–∏:", formatted_text)
        self.assertIn("‚Ä¢ –ß—É–≤—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ - –ù–∞—Ç–∞–Ω–∏—ç–ª—å –ë—Ä–∞–Ω–¥–µ–Ω", formatted_text)
        self.assertIn("–ö–Ω–∏–≥–∞ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏", formatted_text)
        self.assertIn("–ü–æ–º–æ–∂–µ—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –Ω–∏–∑–∫–æ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π", formatted_text)
        
        self.assertIn("üåê –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:", formatted_text)
        self.assertIn("‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Moodpath (–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)", formatted_text)
        self.assertIn("‚Ä¢ –°–∞–π—Ç –ü—Å–∏—Ö–æ–ª–æ–≥–∏.—Ä—Ñ (–û–Ω–ª–∞–π–Ω-—Ä–µ—Å—É—Ä—Å)", formatted_text)
        self.assertIn("–°—Å—ã–ª–∫–∞: https://mymoodpath.com/", formatted_text)
    
    @patch('telegram_bot.ai_service.ai_books.OpenAI')
    def test_get_book_recommendations(self, mock_openai):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥"""
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        mock_client = MagicMock()
        mock_openai.return_value = mock_client
        mock_completion = MagicMock()
        mock_client.chat.completions.create.return_value = mock_completion
        mock_completion.choices = [MagicMock()]
        mock_completion.choices[0].message.content = json.dumps(self.test_recommendations)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dialogue_id = 1
        user_id = 'test_user'
        issue_id = '1'
        dialogue = [
            {"role": "system", "content": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"},
            {"role": "user", "content": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º"}
        ]
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = get_book_recommendations(dialogue_id, user_id, issue_id, dialogue)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OpenAI –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_client.chat.completions.create.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.assertEqual(recommendations, self.test_recommendations)
        self.assertEqual(len(recommendations['books']), 2)
        self.assertEqual(recommendations['books'][0]['title'], "–ß—É–≤—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        import telegram_bot.ai_service.database as db
        user_recommendations = db.get_user_recommendations(user_id)
        self.assertGreater(len(user_recommendations), 0)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        latest_recommendation = max(user_recommendations, key=lambda r: r['id'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.assertEqual(latest_recommendation['user_id'], user_id)
        self.assertEqual(latest_recommendation['issue_id'], issue_id)
        self.assertEqual(latest_recommendation['dialogue_id'], dialogue_id)
        self.assertEqual(latest_recommendation['recommendations_json']['books'][0]['title'], 
                         self.test_recommendations['books'][0]['title'])
    
    @patch('telegram_bot.ai_service.ai_books.get_book_recommendations')
    def test_get_book_recommendations_from_file(self, mock_get_recommendations):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥ –∏–∑ —Ñ–∞–π–ª–∞"""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫
        mock_get_recommendations.return_value = self.test_recommendations
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        formatted_recommendations = get_book_recommendations_from_file(
            self.test_dialogue_path, 1, 'test_user', '1'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ get_book_recommendations –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_get_recommendations.assert_called_once()
        args = mock_get_recommendations.call_args[0]
        self.assertEqual(args[0], 1)  # dialogue_id
        self.assertEqual(args[1], 'test_user')  # user_id
        self.assertEqual(args[2], '1')  # issue_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        self.assertIn("üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–Ω–∏–≥–∏:", formatted_recommendations)
        self.assertIn("üåê –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:", formatted_recommendations)
    
    @patch('telegram_bot.ai_service.ai_books.OpenAI')
    def test_get_book_recommendations_json_error(self, mock_openai):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –≤ –æ—Ç–≤–µ—Ç–µ API"""
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON
        mock_client = MagicMock()
        mock_openai.return_value = mock_client
        mock_completion = MagicMock()
        mock_client.chat.completions.create.return_value = mock_completion
        mock_completion.choices = [MagicMock()]
        mock_completion.choices[0].message.content = "–≠—Ç–æ –Ω–µ JSON"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = get_book_recommendations(1, 'test_user', '1', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —Å –ø—É—Å—Ç—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏
        self.assertEqual(recommendations, {"books": [], "resources": []})


if __name__ == '__main__':
    unittest.main() 